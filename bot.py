from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import sqlite3


# –í–∞—à Telegram ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 425592487  

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
WELCOME_MESSAGE = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å–∞–º—ã–π –∫–ª–∞—Å—Å–Ω—ã–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–µ–Ω–∏–∫ –ì–ë–û–£ –°–û–® –∂.-–¥. —Å—Ç. –ó–≤–µ–∑–¥–∞! 
–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∏–ª–∏ —É–≤–∏–¥–µ—Ç—å –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥?"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS students (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            points INTEGER DEFAULT 0
        )
    """)
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã", callback_data="my_score")],
        [InlineKeyboardButton("–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "my_score":
        await my_score(query, context)
    elif query.data == "leaderboard":
        await leaderboard(query, context)

# –£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã
async def my_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.from_user.id
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, points FROM students WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        name, points = result
        await update.message.reply_text(f"{name}, —É –≤–∞—Å {points} –±–∞–ª–ª–æ–≤.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

# –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, points FROM students ORDER BY points DESC")
    results = cursor.fetchall()
    conn.close()

    if results:
        leaderboard_text = "üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
        for i, (name, points) in enumerate(results, start=1):
            leaderboard_text += f"{i}. {name} ‚Äî {points} –±–∞–ª–ª–æ–≤\n"
        await update.message.reply_text(leaderboard_text)
    else:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç.")

# –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        name = " ".join(context.args[:-1])
        user_id = int(context.args[-1])
        conn = sqlite3.connect("students.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO students (user_id, name) VALUES (?, ?)", (user_id, name))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–£—á–µ–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {user_id}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(context.args[0])
        points = int(context.args[1])
        conn = sqlite3.connect("students.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE students SET points = points + ? WHERE user_id = ?", (points, user_id))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–£—á–µ–Ω–∏–∫—É —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()

    application = Application.builder().token("7907519749:AAGU9zE-mEvkKB4fpEpl331cNRrvx9WQJa8").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_student", add_student))
    application.add_handler(CommandHandler("add_points", add_points))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, leaderboard))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, my_score))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
